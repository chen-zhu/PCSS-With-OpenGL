#version 330 core

//input
in vec3 Normal;
in vec3 FragPos;
in vec4 FragLightSpace;
in vec4 FragLightSpace2;

uniform vec3 LIGHT_COLOR;
uniform vec3 LIGHT_POS;
uniform vec3 LIGHT_POS2;
uniform vec3 VIEW_POS;
uniform vec3 OBJ_COLOR;
uniform sampler2D shadowMap;
uniform sampler2D shadowMap2;

// Ouput data
out vec4 color;

//http://developer.download.nvidia.com/whitepapers/2008/PCSS_Integration.pdf
float w_penumbra(float d_receiver, float d_blocker, float w_light) {
    return (d_receiver - d_blocker) * w_light/ d_blocker;
}


float avg_block_depth(vec4 FragLightSpace, float w_light, sampler2D s_map){
    int sampleCount = 8;
    float blockerSum = 0;
    int blockerCount = 0;
        
    
    vec2 texelSize = 1.0 / textureSize(s_map, 0);
    
    vec3 projCoords = FragLightSpace.xyz / FragLightSpace.w;
    
    projCoords = projCoords * 0.5 + 0.5;
    
    float currentDepth = projCoords.z;
    
    float search_range = w_light * (currentDepth - 0.05) /currentDepth;
    if(search_range <= 0){
        return 0;
    }
    //return search_range / 7.0;
    int range = int(search_range);
    //return range / 10.0;
    
    int window = 3;
    for( int i = -window; i < window; ++i ){
        for( int j = -window; j < window; ++j ){
            vec2 shift = vec2(i * 1.0 * range / window, j * 1.0 * range / window);
            
            //sampleDepth = shadow map value at location (i , j) in the search region
            float sampleDepth = texture(s_map, projCoords.xy + shift * texelSize).r;
            
            if ( sampleDepth < currentDepth ){
                blockerSum += sampleDepth;
                blockerCount++;
            }
        }
    }
    
    if(blockerCount > 0){
        return blockerSum / blockerCount;
    } else {
        return 0; //--> not in shadow~~~~
    }
}


float ShadowCalculation(vec4 FragLightSpace, vec3 LIGHT_POS_pass_in, sampler2D s_map)
{
    // perform perspective divide
    vec3 projCoords = FragLightSpace.xyz / FragLightSpace.w;
    
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(s_map, projCoords.xy).r;
    
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(LIGHT_POS_pass_in - FragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.001);
    
    float w_light = 7.0;
    
    float avg_depth = avg_block_depth(FragLightSpace, w_light, s_map);
    //return  avg_depth;
    if(avg_depth == 0){
        return 0.0f;
    }
    
    float w_penumbra = w_penumbra(currentDepth, avg_depth, w_light);
    
    //if penumbra is zero, it has solid shadow - dark
    if(w_penumbra == 0){
        return 0;
    }
    
    
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(s_map, 0);
    int count = 0;
    
    //pick a searching range based on calculated penumbra width.
    int range = int(w_penumbra/0.09);
    
    //manually set a range if it is too large!
    range = range > 40 ? 40 : range;
    range = range < 1 ? 2 : range;
    
    //return w_penumbra;
    
    for(int x = -range; x <= range; ++x)
    {
        count++;
        for(int y = -range; y <= range; ++y)
        {
            float pcfDepth = texture(s_map, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;
        }
    }
    count = count > 0? count : 1;
    shadow /= (count * count);
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
        
    return shadow;
}


void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * LIGHT_COLOR;
    
    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LIGHT_POS - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * LIGHT_COLOR;
    
    //diffuse 2
    vec3 norm2 = normalize(Normal);
    vec3 lightDir2 = normalize(LIGHT_POS2 - FragPos);
    float diff2 = max(dot(norm2, lightDir2), 0.0);
    vec3 diffuse2 = diff2 * LIGHT_COLOR;
    
    diffuse = diffuse + diffuse2;
    
    // specular
    float specularStrength = 0.9;
    vec3 viewDir = normalize(VIEW_POS - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * LIGHT_COLOR;
    
    // specular 2
    vec3 reflectDir2 = reflect(-lightDir2, norm2);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), 32);
    vec3 specular2 = specularStrength * spec2 * LIGHT_COLOR;
    
    specular = specular + specular2;
        
    float shadow = ShadowCalculation(FragLightSpace, LIGHT_POS, shadowMap);
    
    float shadow2 = ShadowCalculation(FragLightSpace2, LIGHT_POS2, shadowMap2);
    
    //vec3 result = (ambient + (1.0 - ( shadow)) * (diffuse + specular)) * OBJ_COLOR;
    //vec3 result = (ambient + (1.0 - ( shadow2)) * (diffuse + specular)) * OBJ_COLOR;
    vec3 result = (ambient + (1.0 - (shadow + shadow2)) * (diffuse + specular)) * OBJ_COLOR;


    color = vec4(result, 1.0);
    //color = vec4(vec3(shadow), 1.0);
    //color = FragLightSpace / FragLightSpace.w;
    //color = vec4(vec3(shadow), 1.0);
    //color = vec4(textureSize(shadowMap, 0).x / 2048.0,0, 0, 1);
}
